plot_ly(subset(salary,State==state[1]), x = ~Year, y = ~Salary, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[2]), x = ~Year, y = ~Salary, colors = "Set1") %>% add_lines(),
margin = 0.05)
p12 <- layout(p12,
xaxis = list(title = state[1], showgrid=TRUE),
xaxis2 = list(title = state[2], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
p12
p12 <- subplot(
plot_ly(subset(salary,State==state[1]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[2]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p12 <- layout(p12,
xaxis = list(title = state[1], showgrid=TRUE),
xaxis2 = list(title = state[2], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
p12
require(ggplot2)
require(plotly)
salary <- read.csv("C:/Users/Amlan/Documents/Amlan's Website/salary_estimates.csv", header=T)
salary.dt <- read.csv("C:/Users/Amlan/Documents/Amlan's Website/salary_estimates_dt.csv", header=T)
state <- as.matrix(c("Alabama",
"Alaska",
"Arizona",
"Arkansas",
"California",
"Colorado",
"Connecticut",
"District of Columbia",
"Delaware",
"Florida",
"Georgia",
"Hawaii",
"Idaho",
"Illinois",
"Indiana",
"Iowa",
"Kansas",
"Kentucky",
"Louisiana",
"Maine",
"Maryland",
"Massachusetts",
"Michigan",
"Minnesota",
"Mississippi",
"Missouri",
"Montana",
"Nebraska",
"Nevada",
"New Hampshire",
"New Jersey",
"New Mexico",
"New York",
"North Carolina",
"North Dakota",
"Ohio",
"Oklahoma",
"Oregon",
"Pennsylvania",
"Rhode Island",
"South Carolina",
"South Dakota",
"Tennessee",
"Texas",
"Utah",
"Vermont",
"Virginia",
"Washington",
"West Virginia",
"Wisconsin",
"Wyoming"))
#
p12 <- subplot(
plot_ly(subset(salary,State==state[1]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[2]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p12 <- layout(p12,
xaxis = list(title = state[1], showgrid=TRUE),
xaxis2 = list(title = state[2], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p34 <- subplot(
plot_ly(subset(salary,State==state[3]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[4]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p34 <- layout(p34,
xaxis = list(title = state[3], showgrid=TRUE),
xaxis2 = list(title = state[4], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p56 <- subplot(
plot_ly(subset(salary,State==state[5]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[6]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p56 <- layout(p56,
xaxis = list(title = state[5], showgrid=TRUE),
xaxis2 = list(title = state[6], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p78 <- subplot(
plot_ly(subset(salary,State==state[7]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[8]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p78 <- layout(p78,
xaxis = list(title = state[7], showgrid=TRUE),
xaxis2 = list(title = state[8], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p910 <- subplot(
plot_ly(subset(salary,State==state[9]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[10]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p910 <- layout(p910,
xaxis = list(title = state[9], showgrid=TRUE),
xaxis2 = list(title = state[10], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p1112 <- subplot(
plot_ly(subset(salary,State==state[11]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[12]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p1112 <- layout(p1112,
xaxis = list(title = state[11], showgrid=TRUE),
xaxis2 = list(title = state[12], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p1314 <- subplot(
plot_ly(subset(salary,State==state[13]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[14]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p1314 <- layout(p1314,
xaxis = list(title = state[13], showgrid=TRUE),
xaxis2 = list(title = state[14], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p1516 <- subplot(
plot_ly(subset(salary,State==state[15]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[16]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p1516 <- layout(p1516,
xaxis = list(title = state[15], showgrid=TRUE),
xaxis2 = list(title = state[16], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p1718 <- subplot(
plot_ly(subset(salary,State==state[17]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[18]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p1718 <- layout(p1718,
xaxis = list(title = state[17], showgrid=TRUE),
xaxis2 = list(title = state[18], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p1920 <- subplot(
plot_ly(subset(salary,State==state[19]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[20]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p1920 <- layout(p1920,
xaxis = list(title = state[19], showgrid=TRUE),
xaxis2 = list(title = state[20], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p2122 <- subplot(
plot_ly(subset(salary,State==state[21]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[22]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p2122 <- layout(p2122,
xaxis = list(title = state[21], showgrid=TRUE),
xaxis2 = list(title = state[22], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p2324 <- subplot(
plot_ly(subset(salary,State==state[23]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[24]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p2324 <- layout(p2324,
xaxis = list(title = state[23], showgrid=TRUE),
xaxis2 = list(title = state[24], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p2526 <- subplot(
plot_ly(subset(salary,State==state[25]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[26]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p2526 <- layout(p2526,
xaxis = list(title = state[25], showgrid=TRUE),
xaxis2 = list(title = state[26], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p2728 <- subplot(
plot_ly(subset(salary,State==state[27]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[28]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p2728 <- layout(p2728,
xaxis = list(title = state[27], showgrid=TRUE),
xaxis2 = list(title = state[28], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p2930 <- subplot(
plot_ly(subset(salary,State==state[29]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[30]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p2930 <- layout(p2930,
xaxis = list(title = state[29], showgrid=TRUE),
xaxis2 = list(title = state[30], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p3132 <- subplot(
plot_ly(subset(salary,State==state[31]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[32]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p3132 <- layout(p3132,
xaxis = list(title = state[31], showgrid=TRUE),
xaxis2 = list(title = state[32], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p3334 <- subplot(
plot_ly(subset(salary,State==state[33]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[34]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p3334 <- layout(p3334,
xaxis = list(title = state[33], showgrid=TRUE),
xaxis2 = list(title = state[34], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p3536 <- subplot(
plot_ly(subset(salary,State==state[35]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[36]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p3536 <- layout(p3536,
xaxis = list(title = state[35], showgrid=TRUE),
xaxis2 = list(title = state[36], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p3738 <- subplot(
plot_ly(subset(salary,State==state[37]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[38]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p3738 <- layout(p3738,
xaxis = list(title = state[37], showgrid=TRUE),
xaxis2 = list(title = state[38], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p3940 <- subplot(
plot_ly(subset(salary,State==state[39]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[40]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p3940 <- layout(p3940,
xaxis = list(title = state[39], showgrid=TRUE),
xaxis2 = list(title = state[40], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p4142 <- subplot(
plot_ly(subset(salary,State==state[41]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[42]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p4142 <- layout(p4142,
xaxis = list(title = state[41], showgrid=TRUE),
xaxis2 = list(title = state[42], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p4344 <- subplot(
plot_ly(subset(salary,State==state[43]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[44]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p4344 <- layout(p4344,
xaxis = list(title = state[43], showgrid=TRUE),
xaxis2 = list(title = state[44], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p4546 <- subplot(
plot_ly(subset(salary,State==state[45]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[46]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p4546 <- layout(p4546,
xaxis = list(title = state[45], showgrid=TRUE),
xaxis2 = list(title = state[46], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p4748 <- subplot(
plot_ly(subset(salary,State==state[47]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[48]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p4748 <- layout(p4748,
xaxis = list(title = state[47], showgrid=TRUE),
xaxis2 = list(title = state[48], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p4950 <- subplot(
plot_ly(subset(salary,State==state[49]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
plot_ly(subset(salary,State==state[50]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p4950 <- layout(p4950,
xaxis = list(title = state[49], showgrid=TRUE),
xaxis2 = list(title = state[50], showgrid=TRUE, showlegend = FALSE) #https://plot.ly/r/legend/#hiding-legend-entries
)
#
p51 <- subplot(
plot_ly(subset(salary,State==state[51]), x = ~Year, y = ~Salary, color = ~Source, colors = "Set1") %>% add_lines(),
margin = 0.05)
p51 <- layout(p51,
xaxis = list(title = state[51], showgrid=TRUE))
devtools::install_github("ropensci/plotly")
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
library(htmltools)
htmltools::tagList(list(as.widget(p)))
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(ggalt)
data("USArrests")
#get data
dflats     <- read.csv(file="http://dev.maxmind.com/static/csv/codes/state_latlon.csv", sep=",")
twoletters <- read.csv(file="http://voice.firefallpro.com/files/state.csv", sep=",")
crimedf <- USArrests %>%
add_rownames(var = "state") %>%
reshape2::melt() %>%
left_join(twoletters, by=c("state" = "name_long")) %>%
left_join(dflats,     by= c("name_short" = "state")) %>%
filter(!name_short %in% c('AK','HI'))
usa <- map_data("usa")
ggplot() +
geom_map(data = usa,
map=usa,
aes(x=long, y=lat, map_id=region), fill="gray90") +
theme_bw() +
geom_point(data=crimedf,
aes(x= longitude, y=latitude, size=value)) +
facet_wrap(~variable)
#get data
dflats     <- read.csv(file="http://dev.maxmind.com/static/csv/codes/state_latlon.csv", sep=",")
twoletters <- read.csv(file="http://voice.firefallpro.com/files/state.csv", sep=",")
crimedf <- USArrests %>%
add_rownames(var = "state") %>%
reshape2::melt() %>%
left_join(twoletters, by=c("state" = "name_long")) %>%
left_join(dflats,     by= c("name_short" = "state")) %>%
filter(!name_short %in% c('AK','HI'))
usa <- map_data("usa")
ggplot() +
geom_map(data = usa,
map=usa,
aes(x=long, y=lat, map_id=region), fill="gray90") +
theme_bw() +
geom_point(data=crimedf,
aes(x= longitude, y=latitude, size=value)) +
facet_wrap(~variable)
#get data
dflats     <- read.csv(file="http://dev.maxmind.com/static/csv/codes/state_latlon.csv", sep=",")
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(ggalt)
data("USArrests")
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(ggalt)
data("USArrests")
plot(cars)
#get data
dflats     <- read.csv(file="http://dev.maxmind.com/static/csv/codes/state_latlon.csv", sep=",")
twoletters <- read.csv(file="http://voice.firefallpro.com/files/state.csv", sep=",")
crimedf <- USArrests %>%
add_rownames(var = "state") %>%
reshape2::melt() %>%
left_join(twoletters, by=c("state" = "name_long")) %>%
left_join(dflats,     by= c("name_short" = "state")) %>%
filter(!name_short %in% c('AK','HI'))
usa <- map_data("usa")
ggplot() +
geom_map(data = usa,
map=usa,
aes(x=long, y=lat, map_id=region), fill="gray90") +
theme_bw() +
geom_point(data=crimedf,
aes(x= longitude, y=latitude, size=value)) +
facet_wrap(~variable)
require("Matching"); require("rgenoud")
data = read.csv("C:/Users/Amlan/PROJECTS/Oklahoma TACT/TEPH TAACCCT Round 3 Data - Matching.csv", header = TRUE)
edit(data)
require("Matching"); require("rgenoud")
data = read.csv("C:/Users/Amlan/PROJECTS/Oklahoma TACT/TEPH TAACCCT Round 3 Data - Matching.csv", header = TRUE)
edit(data())
edit(data
edit(data)
names(data)
library(psych)
session = dummy.code(data$Start_Session); data = data.frame(data, session)
education = dummy.code(data$Highest.Education); data = data.frame(data, education)
race.new = dummy.code(data$Race); data = data.frame(data, race.new) ## Create serial dummies
data$female <- as.numeric(data$Gender=="F")
data$ft <- as.numeric(data$Enrol_Status=="FT")
data$pell <- as.numeric(data$Pell_Grant=="Yes")
data.est = data[data$program == "EST", ]
data.asn = data[data$program == "ASN", ]
data.ota = data[data$program == "OTA", ]
edit(data)
require("Matching"); require("rgenoud")
data = read.csv("C:/Users/Amlan/PROJECTS/Oklahoma TACT/TEPH TAACCCT Round 3 Data - Matching.csv", header = TRUE)
library(psych)
session = dummy.code(data$Start_Session); data = data.frame(data, session)
education = dummy.code(data$Highest.Education); data = data.frame(data, education)
race.new = dummy.code(data$Race); data = data.frame(data, race.new) ## Create serial dummies
data$female <- as.numeric(data$Gender=="F")
data$ft <- as.numeric(data$Enrol_Status=="FT")
data$pell <- as.numeric(data$Pell_Grant=="Yes")
data.est = data[data$program == "EST", ]
data.asn = data[data$program == "ASN", ]
data.ota = data[data$program == "OTA", ]
Tr <- data.est$treat ## Treatment indicator
attach(data.est)
## Genetic Matching
X <- cbind(Age, X14FA, X15FA, X15SP, X15SU, X16FA, X16SP, X16SU, AS, AN, BL, WH, female, ft, pell)
BalanceMatrix <- cbind(Age, X14FA, X15FA, X15SP, X15SU, X16FA, X16SP, X16SU, AS, AN, BL, WH, female, ft, pell)
gen1 <- GenMatch(Tr = Tr, X = X, BalanceMatrix = BalanceMatrix, pop.size = 1000, wait.generations = 100,
hard.generation.limit = FALSE, ties = TRUE)
mgen1 <- Match(Tr = Tr, X = X, Weight.matrix = gen1)
#set.seed(2000000) # ASN Trial 1
set.seed(2000001) # ASN Trial 2
MatchBalance(Tr ~ Age + X14FA + X15FA + X15SP + X15SU + X16FA + X16SP + X16SU + AS + AN + BL + WH + female + ft + pell +
I(Age*female) + I(Age*WH) + I(Age*BL) + I(Age*AS) + I(Age*AN) + I(Age*ft) + I(Age*pell) +
I(female*WH) + I(female*BL) + I(female*AS) + I(female*AN) + I(female*ft) + I(female*pell) +
I(WH*pell) + I(BL*pell) + I(AS*pell) + I(AN*pell) +
I(WH*ft) + I(BL*ft) + I(AS*ft) + I(AN*ft) + I(pell*ft),
match.out = mgen1,
nboots = 2000000, data = data.est)
summary(mgen1)
write.csv(data.est, "C:/Users/Amlan/PROJECTS/Oklahoma TACT/data.est.csv", row.names = T)
write.csv(data.asn, "C:/Users/Amlan/PROJECTS/Oklahoma TACT/data.asn.csv", row.names = T)
write.csv(data.ost, "C:/Users/Amlan/PROJECTS/Oklahoma TACT/data.ost.csv", row.names = T)
write.csv(data.ota, "C:/Users/Amlan/PROJECTS/Oklahoma TACT/data.ota.csv", row.names = T)
install.packages(c("ape", "BH", "car", "chron", "coda", "colorspace", "curl", "data.table", "GGally", "ggplot2", "git2r", "hms", "htmlwidgets", "jagsUI", "knitr", "MCMCglmm", "plotly", "Rcpp", "repr", "rmarkdown", "rsconnect", "scales", "SparseM", "yaml"))
install.packages("rjags")
install.packages("runjags")
setwd("C:/Users/Amlan/BAYESIAN ANALYSIS/DBDA2Eprograms")
#===== Begin high-level script ================
# Example for Jags-Ymet-XmetMulti-MrobustPredict.R
# http://doingbayesiandataanalysis.blogspot.com/2016/10/posterior-predictive-distribution-for.html
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#.............................................................................
# # Two predictors:
myData = read.csv( file="Guber1999data.csv" )
yName = "SATT"
xName = c("Spend","PrcntTake")
xProbe = matrix( c( 4 , 10 , # Spend, PrcntTake
9 , 10 ,
4 , 80 ,
9 , 80 ) , nrow=4 , byrow=TRUE )
fileNameRoot = "Guber1999data-Predict-"
numSavedSteps=15000 ; thinSteps=5
graphFileType = "png"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-XmetMulti-MrobustPredict.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , xName=xName , yName=yName , xProbe=xProbe ,
numSavedSteps=numSavedSteps , thinSteps=thinSteps ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda) # get all parameter names
for ( parName in parameterNames ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda , saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda , data=myData , xName=xName , yName=yName ,
pairsPlot=TRUE , showCurve=FALSE ,
saveName=fileNameRoot , saveType=graphFileType )
#-------------------------------------------------------------------------------
# Plot posterior predicted y at xProbe:
mcmcMat = as.matrix(mcmcCoda)
xPcols = grep( "xProbe" , colnames(mcmcMat) , value=FALSE )
yPcols = grep( "yP" , colnames(mcmcMat) , value=FALSE )
xLim = quantile( mcmcMat[,yPcols] , probs=c(0.005,0.995) )
for ( i in 1:length(yPcols) ) {
openGraph(width=4,height=3)
xNameText = paste( "@" , paste( xName , collapse=", " ) , "=" )
xProbeValText = paste(mcmcMat[1,xPcols[seq(i,
by=length(yPcols),
length=length(xName))]],
collapse=", ")
plotPost( mcmcMat[,yPcols[i]] , xlab="Post. Pred. y" , xlim=xLim ,
cenTend="mean" ,
main= bquote(atop(.(xNameText),.(xProbeValText))) )
}
#-------------------------------------------------------------------------------
#===== End high-level script ================
install.packages("coda")
install.packages("codadiags")
edit(myData)
install.packages("rmarkdown")
library(rmarkdown)
require(car)
View(Prestige)
install.packages(c("data.table", "digest", "htmlTable"))
shiny::runApp('Shiny_Regression')
